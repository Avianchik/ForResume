@using ToDoList.Domain.Enum
@using ToDoList.Controllers
@using System.IdentityModel.Tokens.Jwt
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "Задачи";
    var jwtToken = HttpContextAccessor.HttpContext.Request.Cookies["tasty-cookies"];

    // Декодирование JWT токена
    var handler = new JwtSecurityTokenHandler();
    var jsonToken = handler.ReadToken(jwtToken);
    var tokenS = jsonToken as JwtSecurityToken;

    // Получение данных из декодированного токена с использованием System.Text.Json
    var userId = tokenS.Claims.First(claim => claim.Type == "userId").Value;
        
    var findUserInfoUrl = Url.Action("FindUserInfo", "User", new { id = userId });
}
<div class=" align-items-center " >
    <div class="    container   " >

        <selection><!-- Создание задачи + таблица закрепленных работников и начальника -->
            <div class="row align-items-stretch h-100 container-fluid container">
                <div class="col-lg-6 mb-4" style="margin-left: -3%; width: 59%">
                    <div class="card shadow-2-strong" style="border-radius: 15px;">
                        <div class="card-body p-4 ps-5 row">
                            <h4 class="mb-3 ">Создание задачи</h4>

                            <form id="createTaskForm">
                                <div class="mb-3">
                                    <label class="form-label">Задача</label>
                                    <input name="Name" id="c1" type="text" class="form-control" autocomplete="off" style="width: 96%"/>
                                </div>
                                <label class="form-label">Закрепленный работник</label>
                                <div class="row" name="">
                                    <div class="col-md-12 mb-2">
                                        <div class="form-outline">

                                            <div class="row col-md-12 mb-2 form-outline">
                                                <div class="row  mb-2 form-outline" style="margin-left: 0px; width: 100%">

                                                    <label class="form-label">Выбранный закрепленный работник</label>
                                                    <input style="pointer-events: none;" type="text" id="workNameInput" readonly="" name="aa" class="form-control form-control-lg"/>
                                                    <input style="pointer-events: none; display: none" type="text" id="workIdInput" readonly="" name="UserId" class="form-control form-control-lg"/>
                                                </div>
                                            </div>
                                            <div class=" ">
                                                <div class="card shadow-2-strong  container-fluid " style="border-radius: 15px;">
                                                    <div class="card-body row ">

                                                        <div class="form-group" style="width: 70%">
                                                            <label class="col-form-label">Фильтр по ФИО</label>
                                                            <input name="FIOFilter" id="FIOFilter" type="text" class="form-control" list="suggestionsList4"/>
                                                            <datalist id="suggestionsList4"></datalist>
                                                        </div>
                                                        <div class="form-group" style="width: 30%">
                                                            <br/>
                                                            <button class="btn btn-primary btn-lg mt-2 pt-1" id="clearFilter">Очистить фильтр</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="container-fluid">
                                                <table class="table  table-hover " style="width: 100%; word-break: break-word;" id="workTableId">
                                                    <thead>
                                                    <tr>
                                                        <th style="width: 85%;">ФИО</th>
                                                        <th style="width: 15%;">Выбрать</th>
                                                    </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <input name="NachId" type="text" class="form-control"/>
                                <button id="createTask" class="btn btn-primary">Создать</button>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 mb-4" style=" width: 44%">
                    <div class="card shadow-2-strong" style="border-radius: 15px;">
                        <div class="card-body p-4 ps-5 row">
                            <h4 class="mb-3 ">Создание обращения</h4>

                            <form id="createTask2Form">
                                <div class="mb-3">
                                    <label class="form-label">Обращение</label>
                                    <input name="Name" id="dd" type="text" autocomplete="off" class="form-control" style="width: 100%"/>
                                </div>
                                <input name="NachId" id="NachId" type="text" class="form-control"/>
                                <button id="createTask2" class="btn btn-primary">Создать</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </selection>
    </div>
</div>
<input name="roleUser1" id="roleUser1" type="text" class="form-control"/>
<div class=" align-items-center h-100" >
    <div class=" card shadow-2-strong card-registration p-4 ps-5 container  h-100 ps-0" style="border-radius: 15px;">
        <h3 class="col text-center">Полученные задачи</h3>
    
        <section><!-- Фильтры для выданных нам задач -->

            <div class="row  h-100 container-fluid ">
                <div class="card shadow-2-strong  "  style="border-radius: 15px; width: 80%">
                    <div class="card-body p-4 ps-5 row">
                        <h3 class="" >Фильтры</h3>

                        <div class="form-group " style="width: 50%">
                            <label class="col-form-label">Фильтр по названию</label>
                            <input name="giveMeName" id="giveMeName" type="text" class="form-control" list="suggestionsList"/>
                            <datalist id="suggestionsList"></datalist>
                        </div>
                        <div class="form-group " style="width: 50%">
                            <label class="col-form-label">Фильтр по выдавшему</label>
                            <input name="giveMeNach" id="giveMeNach" type="text" class="form-control" list="suggestionsList123"/>
                            <datalist id="suggestionsList123"></datalist>
                        </div>
                        <div class="form-group " style="width: 50%">
                            <label class="col-form-label">Фильтр по статусу выполнения</label>
                            <select name="giveMeStat" class="form-control mb-3" asp-items="Html.GetEnumSelectList<StatTask>()">
                                <option value="">
                                    Все
                                </option>
                            </select>
                        </div>
                        
                        <div class="form-group  row " style="">
                            <label class="col-form-label ">Отображать по дате создания</label>
                            <div class=" col-md-2">
                                <input name="giveMeDataStart" id="giveMeDataStart" style="enableTime: true," type="text" placeholder="С" class="flatpickr-input form-control"/>
                            </div>
                            <div class=" col-md-2">
                                <input name="giveMeDataEnd" id="giveMeDataEnd" type="text" placeholder="По" class="flatpickr-input form-control"/>
                            </div>
                        </div>
                        <div class="form-group col-md-4 ">
                            <br/>
                            <button class="btn btn-primary btn-lg mt-2 pt-1" id="clearFilters">Очистить фильтры</button>
                        </div>
                    </div>
                </div>
                <div class="card shadow-2-strong col-md-2 ms-5" style="border-radius: 15px; display: none">
                    <div class="card-body p-4 ps-2 row">
                        <h3 class="">Отчёт</h3>

                        <div class="form-group col-md-4">
                            <br/>
                            <button class="btn btn-primary btn-lg mt-2 pt-1" id="clearFilters">Создать отчёт</button>
                        </div>
                    </div>
                </div>
            </div>

        </section>

        <!-- Таблица с выданными нам задачами -->
        <section class=" p-lg-2" name="mbHide" id="mbHide">
            <div class="card" style="border-radius: 15px;">
                <div class="card-body p-4 ps-5 ">
                    <table class="table table-hover display" style=" word-break: break-word;" id="giveMeTaskTableId">
                        <thead>
                        <tr>
                            <th style="width: 53%;">Задача/Обращение</th>
                            <th style="width: 15%;">Статус выполнения✏️</th>
                            <th style="width: 15%;">Получено от</th>
                            <th style="width: 15%;">Дата создания задачи</th>
                            
                        </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </section>
    </div>
</div>
<br/>
<div class=" align-items-center h-100" >
<div class=" card shadow-2-strong card-registration p-4 ps-5 container  h-100 ps-0" style="border-radius: 15px;">
<h3 class="col text-center">Выданные задачи</h3>
    <section><!-- Фильтры выданных НАМИ задач и формирование отчёта -->
        <div class="row align-items-stretch h-100 container-fluid ">
            <div class="card shadow-2-strong col-md-9 " style="border-radius: 15px;">
                <div class="card-body p-4 ps-5 row">
                    <h3 class="">Фильтры</h3>
                    <div class="form-group col-md-4">
                        <label class="col-form-label">Фильтр по названию</label>
                        <input name="workerTaskName" id="workerTaskName" type="text" class="form-control" list="suggestionsList2"/>
                        <datalist id="suggestionsList2"></datalist>
                    </div>
                    <div class="form-group col-md-4">
                        <label class="col-form-label">Фильтр по работнику</label>
                        <input name="workerTaskWorker" id="workerTaskWorker" type="text" class="form-control" list="suggestionsList3"/>
                        <datalist id="suggestionsList3"></datalist>
                    </div>
                    <div class="form-group col-md-4">
                        <label class="col-form-label">Фильтр по статусу выполнения</label>
                        <select name="workerTaskStat" class="form-control mb-3" asp-items="Html.GetEnumSelectList<StatTask>()">
                            <option value="">
                                Все
                            </option>
                        </select>
                    </div>
                    <div class="form-group col-md-6 row">
                        <label class="col-form-label ">Отображать по дате создания</label>
                        <div class=" col-md-7" style="width: 35%">
                            <input name="workerTaskDataStart" id="workerTaskDataStart" style="enableTime: true," type="text" placeholder="С" class="flatpickr-input form-control"/>
                        </div>
                        <div class=" col-md-7" style="width: 35%">
                            <input name="workerTaskDataEnd" id="workerTaskDataEnd" type="text" placeholder="По" class="flatpickr-input form-control"/>
                        </div>
                    </div>
                    <div class="form-group col-md-6 row" style="margin-left: -15%">
                        <label class="col-form-label ">Отображать по дате выполнения</label>
                        <div class=" col-md-7" style="width: 35%">
                            <input name="workerTaskDataStart2" id="workerTaskDataStart2" style="enableTime: true," type="text" placeholder="С" class="flatpickr-input form-control"/>
                        </div>
                        <div class=" col-md-7" style="width: 35%">
                            <input name="workerTaskDataEnd2" id="workerTaskDataEnd2" type="text" placeholder="По" class="flatpickr-input form-control"/>
                        </div>
                    </div>
                    <div class="form-group col-md-4" style="margin-left: -14%">
                        <br/>
                        <button class="btn btn-primary btn-lg mt-2 pt-1" id="clearFilters2">Очистить фильтры</button>
                    </div>
                </div>
            </div>
            <div class="card shadow-2-strong col-md-2 ms-5" style="border-radius: 15px; ">
                <div class="card-body p-4 ps-2 row">
                    <h3 class="">Отчёт</h3>
                        
                    <div class="form-group ">
                        <br/>
                        <button class="btn btn-primary btn-lg mt-2 pt-1" id="generatePdfButton">Создать отчёт</button>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Таблица с работниками и задачами -->
    <section class=" p-lg-2">
        <div class="card" style="border-radius: 15px;">
            <div class="card-body p-4 ps-5">
                <table class="table table-hover" style=" word-break: break-word;" id="workerTaskTableId">
                    <thead>
                    <tr>
                        <th style="width: 40%;">Задача/Обращение</th>
                        <th style="width: 25%;">Работник</th>
                        <th style="width: 12%;">Статус выполнения✏️</th>
                        <th style="width: 11%;">Дата создания задачи</th>
                        <th style="width: 12%;">Дата выполнения задачи</th>
                    </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </section>
</div>
</div>
@section Scripts
{<script>
                 
                 $(document).ready(function() {
                     // Отправка AJAX запроса к серверу для получения данных пользователя
                     
                 });
             </script>

    <script>
                    
        $(document).ready(function() {
            // Отправка AJAX запроса к серверу для получения данных пользователя
            document.querySelector('input[name="NachId"]').value = @userId;
            $('input[name="NachId"]').hide();
            
            document.querySelector('input[id="NachId"]').value = @userId;
            //var table = document.getElementById('workerTaskTableId');
            
        });
    </script>
    <!-- Новые скрипты -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://npmcdn.com/flatpickr/dist/flatpickr.min.js"></script>
    <script src="https://npmcdn.com/flatpickr/dist/l10n/ru.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js"></script>

    <script>
    const startDateInput = document.getElementById('giveMeDataStart');
    const endDateInput = document.getElementById('giveMeDataEnd');
    let startDate;
    let endDate;
    flatpickr.localize(flatpickr.l10ns.ru);
    

    var workName='';    
    var workId=0;
    var prevButton2 = null;
    const swalWithBootstrapButtons = Swal.mixin({
                              customClass: {
                                confirmButton: "btn btn-success m",
                                denyButton:"btn btn-danger ms-5"
                              },
                              buttonsStyling: false
                            });
   
   
$.ajax({
                             url: '@findUserInfoUrl',
                             type: 'GET',
                             dataType: 'json',
                             success: function(data) {
                                 // Присвоение полученных данных переменной userData
                                 var userData= data;
    let datatable2 =$('#workTableId').DataTable({
    "language": {
                "url": "/lib/Russian.json"
            },
                info: false,
                serverSide: true,
                searching: false,
                paging: true,
                sorting: true,
                order: [[0, 'asc']],
                ajax:{
                    url:"@Url.Action("UserHandler", "User")",
                    method:'POST',
                    data: function (u) {
                    u.filter = {
                        fio: $('input[name="FIOFilter"]').val(),
                        nachalnikId:@userId,
                        forn:userData.role,
                        sortColumn: u.columns[u.order[0].column].data,
                        sortDirection: u.order[0].dir
                    };
                    u.start = u.start;
                    u.length = u.length;   
                    },
                    },
                    columns:[
                        { data: 'fio',sortable: true},
                        { 
                            data: null,
                            sortable: false,
                            render: function (data, type){
                                    return '<button class="btn btn-primary btn-sm center-block">Выбрать</button>'
                                }
                        },
                        ],
                    createdRow: function (nRow, data){
                    
                    var handlerSelect = function(event) {
                        event.preventDefault();
                    
                        // Сбрасываем класс 'btn-outline-primary' у предыдущей кнопки
                        if (prevButton2) {
                                    prevButton2.classList.remove('btn-outline-primary');
                                    prevButton2.classList.add('btn-primary');
                        }
                    
                        // Добавляем класс 'btn-outline-primary' только к текущей нажатой кнопке
                        this.classList.remove('btn-primary');
                        this.classList.add('btn-outline-primary');
                    
                        workId =data.id;
                        workName= data.fio;
                        prevButton2 = this;
                        workNameInput.value=''+workName;
                        workIdInput.value=''+workId;
                    }
                    
                    
                   for (var i=1; i< datatable2.columns().header().length - 1; i++){
                           $('td',nRow).eq(i).css('cursor','pointer');
                   }
                    $('td button',nRow).on('click',handlerSelect);
                    
                }
            });    
},
                            error: function(xhr, status, error) {
                                console.log('Ошибка при получении данных пользователя: ' + error);
                            }
                        });
                    $('input[name="FIOFilter"]').on('change',function (){
                                                        datatable2.draw();
                                                }),
            $('#clearFilter').on('click', function (){
                    var input = document.querySelector('input[name="FIOFilter"]');
                                            if (input) {
                                                    input.value = '';
                                                }            
                                            event.preventDefault();
                                            datatable2.draw();
                    });
                    $('#FIOFilter').on('input', function() {
                            var inputVal = this.value.toLowerCase(); // Получаем введенное значение и приводим к нижнему регистру
                            var suggestions = datatable2.column(0).data().toArray(); // Получаем значения из первого столбца таблицы
                        
                            if (suggestions === undefined || suggestions === null) {
                                  suggestions = [];
                              }
                              // Фильтрация значений из таблицы, которые начинаются с введенного текста
                              var uniqueFilteredSuggestions = [...new Set(suggestions.filter(function(item) {
                                      return item !== null && item.toLowerCase().startsWith(inputVal);
                                  }))];
                        
                            // Отображение отфильтрованных значений в виде подсказок
                            // Здесь можно использовать любую библиотеку для отображения подсказок, например, jQuery UI Autocomplete
                            // Ниже приведен простой пример добавления подсказок в элемент <datalist>
                            var datalist = $('#suggestionsList4');
                            datalist.empty(); // Очистка предыдущих подсказок
                        
                            uniqueFilteredSuggestions.forEach(function(item) {
                                datalist.append('<option value="' + item + '">');
                            });
                            
                        });
    $('#createTask').on('click', function (e) {
        e.preventDefault();
        
            var isValid = true;
            var in1 = document.querySelector('#c1').value;
            var in2 = document.querySelector('#workIdInput').value;

                if ((in1 == "")||(in2 == '')) {
                    isValid = false;
                    Swal.fire({
                        title: 'Ошибка',
                        text: 'Пожалуйста, заполните все обязательные поля.',
                        icon: 'error',
                        confirmButtonText: 'Ок',
                    });
                    return false;
                }
            
            if (isValid) {
        $.ajax({
        
            type: 'POST',
            url: '@Url.Action("Create", "Task")', // Убедитесь, что этот URL верный
            data: $('#createTaskForm').serialize(),
            success: function (response) {
                Swal.fire({
                    title: 'Информация',
                    text: response.description,
                    icon: 'success',
                    confirmButtonText: 'Ок',
                })
                datatable.draw();
            },
            error: function (response) {
                // Обратите внимание, что для доступа к описанию в случае ошибки
                // может потребоваться использовать response.responseJSON.description
                Swal.fire({
                    title: 'Ошибка',
                    text: response.responseJSON.description,
                    icon: 'error',
                    confirmButtonText: 'Ок',
                })
            }
        }); }
    });
    
    $('#createTask2').on('click', function (e) {
    e.preventDefault()
    isValid = true;
    var in1 = document.querySelector('#dd').value;
    
                    if ((in1 == "")) {
                        isValid = false;
                        Swal.fire({
                            title: 'Ошибка',
                            text: 'Пожалуйста, заполните все обязательные поля.',
                            icon: 'error',
                            confirmButtonText: 'Ок',
                        });
                        return false;
                    }
                
                if (isValid) {
    $.ajax({
            type: 'POST',
            url: '@Url.Action("Create", "Task")', // Убедитесь, что этот URL верный
            data: $('#createTask2Form').serialize(),
            success: function (response) {
                Swal.fire({
                    title: 'Информация',
                    text: 'Обращение создалось',
                    icon: 'success',
                    confirmButtonText: 'Ок',
                })
                datatable.draw();
            },
            error: function (response) {
                // Обратите внимание, что для доступа к описанию в случае ошибки
                // может потребоваться использовать response.responseJSON.description
                Swal.fire({
                    title: 'Ошибка',
                    text: response.responseJSON.description,
                    icon: 'error',
                    confirmButtonText: 'Ок',
                })
            }
        }); }
    });
    
    let datatable3 = $('#giveMeTaskTableId').DataTable({
        "language": {
            "url": "/lib/Russian.json"
        },
        info: false,
        serverSide: true,
        searching: false,
        paging: true,
        sorting: true,
        order: [[0, 'asc']],
        ajax: {
            url: "@Url.Action("TaskHandler", "Task")",
            method: 'POST',
            data: function (d) {
                d.filter = {
                    userId: @userId,
                    name: $('input[name="giveMeName"]').val(),
                    nachName: $('input[name="giveMeNach"]').val(),
                    isDone: $('select[name="giveMeStat"]').val(),
                    startDate: $('input[name="giveMeDataStart"]').val(),
                    endDate: $('input[name="giveMeDataEnd"]').val(),
                    sortColumn: d.columns[d.order[0].column].data,
                    sortDirection: d.order[0].dir
                };
                
                
                    d.start = d.start;
                    d.length = d.length;
            },
        },
        columns: [
            { data: 'name', sortable: true },
            { data: 'isDone', sortable: true },
            {data:'nachalnik',sortable: true},
            { data: 'created', sortable: true },
            
        ],
        createdRow: function (nRow, data) {
            var handlerCompleated = function () {
                
                    
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("EndTask", "Task")',
                            data: { id: data.id },
                            success: function (response) {
                                Swal.fire({
                                    title: 'Информация',
                                    text: response.description,
                                    icon: 'success',
                                    confirmButtonText: 'Ок'
                                })
                                datatable3.draw();
                            },
                            error: function (response) {
                                Swal.fire({
                                    title: 'Информация',
                                    text: response.responseJSON.description,
                                    icon: 'error',
                                    confirmButtonText: 'Ок'
                                })
                            }
                        })
            }
            @*select.on('click', function (e) {
                e.stopPropagation(); // Предотвращаем распространение события клика
            });*@
    
            for (var i = 1; i < datatable.columns().header().length - 1; i++) {
                $('td', nRow).eq(i).css('cursor', 'default');
                if (i === 1) { // Обрабатываем только ячейку "isDone"
                            $('td', nRow).eq(i).css('cursor', 'pointer');
                            $('td', nRow).eq(i).on('mouseenter', function () {
                                
                                var currentValue = data.isDone; // Получаем текущее значение isDone
                                console.log(currentValue);
                                var select = $('<select name="targetSelect" class="form-control"></select>');
                                
                                
                                var options = [
                                    { value: "", text: "Не менять" },
                                    { value: "1", text: "Не взято" },
                                    { value: "2", text: "Выполнено" },
                                    { value: "3", text: "В работе" },
                                    { value: "4", text: "Отменено" },
                                    { value: "5", text: "Работа приостановлена" }
                                ];
                                
                                // Добавляем опции в select
                                $.each(options, function(index, option) {
                                    if (option.text !== currentValue) {
                                        select.append('<option value="' + option.value + '">' + option.text + '</option>');
                                    }
                                });
                                
                                // Устанавливаем текущее значение в качестве placeholder
                                select.find('option[value=""]').text(currentValue);
                                
                                
                                $(this).html('').append(select); // Заменяем содержимое ячейки на select
                                select.on('click', function (e) {
                                    e.stopPropagation(); // Предотвращаем распространение события клика
                                });
                                select.on('mouseout', function () {
                                                                        datatable3.draw();
                                                                    });
                                select.on('change', function () {
                                    var newValue = $(this).val();
                                    // Отправляем AJAX-запрос на сервер для обновления статуса задачи
                                    $.ajax({
                                        type: 'POST',
                                        url: '@Url.Action("EndTask", "Task")',
                                        data: { id: data.id, stat: newValue },
                                        success: function (response) {
                                            Swal.fire({
                                                title: 'Информация',
                                                text: response.description,
                                                icon: 'success',
                                                confirmButtonText: 'Ок'
                                            });
                                                datatable3.draw();  
                                        },
                                        error: function (response) {
                                            Swal.fire({
                                                title: 'Информация',
                                                text: response.responseJSON.description,
                                                icon: 'error',
                                                confirmButtonText: 'Ок'
                                            });
                                        }
                                    });
                                });
                            });
                }
            }
            
            
        }
        
    });

   
   
    flatpickr(".flatpickr-input", {
        dateFormat: "d-m-Y",
        mode: "single",
        onChange: function(selectedDates, dateStr, instance) {
            console.log($('input[name="giveMeDataStart"]').val())
                    
        }
    });
    $('input[name="giveMeName"]').on('change',function (){
            datatable3.draw();
    }),
    $('input[name="giveMeNach"]').on('change',function (){
                datatable3.draw();
        }),
    $('input[name="giveMeDataEnd"]').on('change',function (){
                                datatable3.draw();
                        }),
    $('input[name="giveMeDataStart"]').on('change',function (){
                                datatable3.draw();
                        }),                    
    $('select[name="giveMeStat"]').on('change',function (){
            datatable3.draw();
    }),
    $('input[name="workerTaskName"]').on('change',function (){
            datatable.draw();
    }),
    $('input[name="workerTaskWorker"]').on('change',function (){
                datatable.draw();
        }),
    $('input[name="workerTaskDataEnd"]').on('change',function (){
            datatable.draw();
    }),
    $('input[name="workerTaskDataStart"]').on('change',function (){
            datatable.draw();
    }),    
    $('input[name="workerTaskDataEnd2"]').on('change',function (){
                datatable.draw();
        }),
    $('input[name="workerTaskDataStart2"]').on('change',function (){
            datatable.draw();
    }),                
    $('select[name="workerTaskStat"]').on('change',function (){
            datatable.draw();
    }),
    
    $('#clearFilters').on('click', function (){
        var input = document.querySelector('input[name="giveMeName"]');
                                if (input) {
                                        input.value = '';
                                    }
           
        var input = document.querySelector('input[name="giveMeNach"]');
                                if (input) {
                                        input.value = '';
                                    }
        var input = document.querySelector('input[name="giveMeStat"]');
                                if (input) {
                                        input.value = '';
                                    }                        
                                
        var roleFilterSelect = document.querySelector('select[name="giveMeStat"]');
                                    if (roleFilterSelect) {
                                        roleFilterSelect.value = '';
                                    }
                                    
        var input = document.querySelector('input[name="giveMeDataStart"]');
                                   if (input) {
                                           input.value = '';
                                       }        
        var input = document.querySelector('input[name="giveMeDataEnd"]');
                                   if (input) {
                                           input.value = '';
                                       }                                                      
                                    datatable3.draw();
                                
    })
    $('#giveMeName').on('input', function() {
        var inputVal = this.value.toLowerCase(); // Получаем введенное значение и приводим к нижнему регистру
        var suggestions = datatable3.column(0).data().toArray(); // Получаем значения из первого столбца таблицы
    
        if (suggestions === undefined || suggestions === null) {
              suggestions = [];
          }
          // Фильтрация значений из таблицы, которые начинаются с введенного текста
          var uniqueFilteredSuggestions = [...new Set(suggestions.filter(function(item) {
                  return item !== null && item.toLowerCase().startsWith(inputVal);
              }))];
    
        // Отображение отфильтрованных значений в виде подсказок
        // Здесь можно использовать любую библиотеку для отображения подсказок, например, jQuery UI Autocomplete
        // Ниже приведен простой пример добавления подсказок в элемент <datalist>
        var datalist = $('#suggestionsList');
        datalist.empty(); // Очистка предыдущих подсказок
    
        uniqueFilteredSuggestions.forEach(function(item) {
            datalist.append('<option value="' + item + '">');
        });
        
    });
    $('#giveMeNach').on('input', function() {
            var inputVal = this.value.toLowerCase(); // Получаем введенное значение и приводим к нижнему регистру
            var suggestions = datatable3.column(2).data().toArray(); // Получаем значения из первого столбца таблицы
        
            if (suggestions === undefined || suggestions === null) {
                  suggestions = [];
              }
              // Фильтрация значений из таблицы, которые начинаются с введенного текста
              var uniqueFilteredSuggestions = [...new Set(suggestions.filter(function(item) {
                      return item !== null && item.toLowerCase().startsWith(inputVal);
                  }))];
        
            // Отображение отфильтрованных значений в виде подсказок
            // Здесь можно использовать любую библиотеку для отображения подсказок, например, jQuery UI Autocomplete
            // Ниже приведен простой пример добавления подсказок в элемент <datalist>
            var datalist = $('#suggestionsList123');
            datalist.empty(); // Очистка предыдущих подсказок
        
            uniqueFilteredSuggestions.forEach(function(item) {
                datalist.append('<option value="' + item + '">');
            });
            
        });                
                    
    let datatable =$('#workerTaskTableId').DataTable({
    "language": {
                "url": "/lib/Russian.json"
            },
                info: false,
                serverSide: true,
                searching: false,
                paging: true,
                sorting: true,
                order: [[0, 'asc']],
                ajax:{
                    url:"@Url.Action("TaskHandler", "Task")",
                    method:'POST',
                    data: function (d) {
                                        d.filter = {
                                            nachId:@userId,
                                            name: $('input[name="workerTaskName"]').val(),
                                            userName: $('input[name="workerTaskWorker"]').val(),
                                            isDone: $('select[name="workerTaskStat"]').val(),
                                            startDate: $('input[name="workerTaskDataStart"]').val(),
                                            endDate: $('input[name="workerTaskDataEnd"]').val(),
                                            startDate2: $('input[name="workerTaskDataStart2"]').val(),
                                            endDate2: $('input[name="workerTaskDataEnd2"]').val(),
                                            sortColumn: d.columns[d.order[0].column].data,
                                            sortDirection: d.order[0].dir
                                        };
                                        d.start = d.start;
                                        d.length = d.length;   
                                    },
                    },
                    columns:[
                        { data: 'name',sortable: true},
                        { data: 'user',sortable: true},
                        { data: 'isDone',sortable: true},
                        { data: 'created',sortable: true},
                        { data: 'ended',sortable: true},
                        
                        ],
                    createdRow: function (nRow, data){
                    
                    for (var i=1; i< datatable.columns().header().length - 1; i++){
                            $('td',nRow).eq(i).css('cursor','default'); 
                    }
                    
                }
            });
    $('#clearFilters2').on('click', function (){
    var input = document.querySelector('input[name="workerTaskName"]');
                            if (input) {
                                    input.value = '';
                                }
    var input = document.querySelector('input[name="workerTaskWorker"]');
                                if (input) {
                                        input.value = '';
                                    }                        
    var input = document.querySelector('input[name="workerTaskStat"]');
                            if (input) {
                                    input.value = '';
                                }                        
                            
    var roleFilterSelect = document.querySelector('select[name="workerTaskStat"]');
                                if (roleFilterSelect) {
                                    roleFilterSelect.value = '';
                                }
                                
    var input = document.querySelector('input[name="workerTaskDataStart"]');
                               if (input) {
                                       input.value = '';
                                   }        
    var input = document.querySelector('input[name="workerTaskDataEnd"]');
                               if (input) {
                                       input.value = '';
                                   }     
    var input = document.querySelector('input[name="workerTaskDataStart2"]');
                                  if (input) {
                                          input.value = '';
                                      }        
    var input = document.querySelector('input[name="workerTaskDataEnd2"]');
                                  if (input) {
                                          input.value = '';
                                      } 
                                datatable.draw();
                            
})
$('#workerTaskName').on('input', function() {
    var inputVal = this.value.toLowerCase(); // Получаем введенное значение и приводим к нижнему регистру
    var suggestions = datatable.column(0).data().toArray(); // Получаем значения из первого столбца таблицы

    if (suggestions === undefined || suggestions === null) {
          suggestions = [];
      }
      // Фильтрация значений из таблицы, которые начинаются с введенного текста
      var uniqueFilteredSuggestions = [...new Set(suggestions.filter(function(item) {
              return item !== null && item.toLowerCase().startsWith(inputVal);
          }))];

    // Отображение отфильтрованных значений в виде подсказок
    // Здесь можно использовать любую библиотеку для отображения подсказок, например, jQuery UI Autocomplete
    // Ниже приведен простой пример добавления подсказок в элемент <datalist>
    var datalist = $('#suggestionsList2');
    datalist.empty(); // Очистка предыдущих подсказок

    uniqueFilteredSuggestions.forEach(function(item) {
        datalist.append('<option value="' + item + '">');
    });
    
});
$('#workerTaskWorker').on('input', function() {
    var inputVal = this.value.toLowerCase(); // Получаем введенное значение и приводим к нижнему регистру
    var suggestions = datatable.column(1).data().toArray(); // Получаем значения из первого столбца таблицы

    if (suggestions === undefined || suggestions === null) {
          suggestions = [];
      }
      // Фильтрация значений из таблицы, которые начинаются с введенного текста
      var uniqueFilteredSuggestions = [...new Set(suggestions.filter(function(item) {
              return item !== null && item.toLowerCase().startsWith(inputVal);
          }))];

    // Отображение отфильтрованных значений в виде подсказок
    // Здесь можно использовать любую библиотеку для отображения подсказок, например, jQuery UI Autocomplete
    // Ниже приведен простой пример добавления подсказок в элемент <datalist>
    var datalist = $('#suggestionsList3');
    datalist.empty(); // Очистка предыдущих подсказок

    uniqueFilteredSuggestions.forEach(function(item) {
        datalist.append('<option value="' + item + '">');
    });
});


var generatePdf = function () {
                
                    var filter = {
                                                        nachId:@userId,
                                                        name: $('input[name="workerTaskName"]').val(),
                                                        userName: $('input[name="workerTaskWorker"]').val(),
                                                        isDone: $('select[name="workerTaskStat"]').val(),
                                                        startDate: $('input[name="workerTaskDataStart"]').val(),
                                                        endDate: $('input[name="workerTaskDataEnd"]').val(),
                                                        startDate2: $('input[name="workerTaskDataStart2"]').val(),
                                                        endDate2: $('input[name="workerTaskDataEnd2"]').val(),
                                                        
                                                    }   
                        $.ajax({
                            
                            url: '@Url.Action("PDFCreate", "Task")',
                            method:'POST',
                            data:  {filter:filter
                                
                            },
                            success: function (response) {
                                // Получение файла
                                
                                fetch('/download')
                                  .then(response => response.blob())
                                  .then(blob => {
                                    const url = URL.createObjectURL(blob);
                                    const a = document.createElement('a');
                                    a.href = url;
                                    a.download = 'Отчёт.pdf';
                                    a.click();
                                    URL.revokeObjectURL(url);
                                  });
                            },
                            error: function (response) {
                                Swal.fire({
                                    title: 'Информация',
                                    text: response.responseJSON.description,
                                    icon: 'error',
                                    confirmButtonText: 'Ок'
                                })
                            }
                        })
            }
            // Добавление кнопки для генерации PDF-файла
            document.getElementById('generatePdfButton').addEventListener('click', generatePdf);
    </script>

}
