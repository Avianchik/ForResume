@using ToDoList.Domain.Enum

@using ToDoList.Controllers
@using System.IdentityModel.Tokens.Jwt
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Регистация";
    var jwtToken = HttpContextAccessor.HttpContext.Request.Cookies["tasty-cookies"];

    // Декодирование JWT токена
    var handler = new JwtSecurityTokenHandler();
    var jsonToken = handler.ReadToken(jwtToken);
    var tokenS = jsonToken as JwtSecurityToken;
// Получение данных из декодированного токена с использованием System.Text.Json
    var userId = tokenS.Claims.First(claim => claim.Type == "userId").Value;

}

<section class=" " >
  <div class="" >
    <div class=" align-items-center h-100" >
      <div class="">
        <div class="" >
          <div class="card shadow-2-strong card-registration p-4 ps-5 container  h-100 ps-0 " style="border-radius: 15px;">
            <h3 class="mb-2 pb-2 pb-md-0 mb-md-3">Регистрация пользователя</h3>
            <form id="createUserForm" >

              <div class="row col-md-12 mb-2 form-outline">
                  <label class="form-label" for="FIOinput">ФИО</label>
                  <input type="text" id="FIOinput" name="FIO" class="form-control form-control-lg"/>
              </div>
              
              <div class="row mb-2">
                 <div class="col-md-6 mb-2 form-outline text-start">
                     <label class="form-label" for="logininput" >Логин</label>
                     <input type="text" id="logininput" name="login" class="form-control form-control-lg" autocomplete="off" style="margin-left: -12px;"/>
                 </div>
                  <div class="col-md-6 form-outline">
                      <label class="form-label" for="passwordinput">Пароль</label>
                      <input type="text" id="passwordinput" name="password" class="form-control form-control-lg" style="margin-left: -12px;" autocomplete="off"/>
                  </div>
              </div>
              
              <div class="row col-md-12 mb-2 form-outline">
                
                    <label class="form-label">Роль</label>
                    <select id="roleSearch" class="form-control form-control-lg" name="role" asp-items="Html.GetEnumSelectList<Role>()"></select>
                  
              </div>
             
              
              <div class="row col-md-12 mb-2 form-outline ">
                  <div style="width: 50%;display: none">
                      <label class="form-label">Код выбранного отдела</label>
                      <input style="pointer-events: none; margin-left: -12px; " type="text" id="depIdInput" readonly=""  name="DepartamentId" class="form-control form-control-lg"/>
                  </div>
                  <div style="width:  50%">
                      <label class="form-label" >Название выбранного отдела</label>
                      <input type="text" id="depNameInput" readonly="" style="pointer-events: none;  " name="Departament" class="justify-content-end form-control form-control-lg"/>
                  </div> 
              </div>
              
              <div class="row">
                <div class="col-md-12 mb-2">
                  <div class="form-outline">
                      <label class="form-label">Отдел</label>
                     
                          <div class=" ">
                              <div class="card shadow-2-strong  container-fluid" style="border-radius: 15px;">
                                  <div class="card-body row">
                                      
                                      <div class="form-group col-md-4">
                                          <label class="col-form-label">Фильтр по номеру</label>
                                          <input name="idDep" id="idDep" type="text" class="form-control" list="suggestionsList8"/>
                                          <datalist id="suggestionsList8"></datalist>
                                      </div>
                                      <div class="form-group col-md-4">
                                            <label class="col-form-label">Фильтр по названию</label>
                                            <input name="nameDep" id="nameDep" type="text" class="form-control"list="suggestionsList9"/>
                                              <datalist id="suggestionsList9"></datalist> 
                                        </div>
                                      <div class="form-group col-md-4">
                                          
                                          <button class="btn btn-primary btn-lg mt-2 pt-1" id="clearFilters">Очистить фильтры</button>
                                      </div>
                                  </div>
                              </div>
                          </div>
                        <div class="container-fluid">
                                <table class="table  table-hover " style="word-break: break-word;" id="depTableId">
                                    <thead>
                                    <tr>
                                        <th style="width: 10%;">Номер</th>
                                        <th style="width: 80%;">Название</th>
                                        <th style="width: 10%;">Выбрать</th> 
                                    </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                  </div>
                </div>
              </div>
              
              <div class="row"  name="nach" >
                <div class="col-md-12 mb-2">
                  <div class="form-outline">
                      <label class="form-label">Начальник</label>
                      
                      <div class="row col-md-12 mb-2 form-outline">
                                        <div class="row col-md-6 mb-2 form-outline">
                                                                      
                                            <label class="form-label">Выбранный начальник</label>
                                            <input style="pointer-events: none;" type="text" id="nachNameInput" readonly="" name="aa" class="form-control form-control-lg"/>  
                                            <input style="pointer-events: none;" type="text" id="nachIdInput"  readonly="" name="NachalnikId" class="form-control form-control-lg"/>
                                            <input name="logID" id="logID"  ></input>
                                        </div>
                                    </div>
                      <div class=" ">
                          <div class="card shadow-2-strong  container-fluid" style="border-radius: 15px;">
                              <div class="card-body row">
                                  
                                  <div class="form-group col-md-4">
                                        <label class="col-form-label">Фильтр по ФИО</label>
                                        <input name="FIOFilter" id="FIOFilter" type="text" class="form-control"list="suggestionsList10"/>
                                        <datalist id="suggestionsList10"></datalist>
                                    </div>
                                  <div class="form-group col-md-4">
                                      <button class="btn btn-primary btn-lg mt-2 pt-1" id="clearFilter">Очистить фильтр</button>
                                  </div>
                              </div>
                          </div>
                      </div>
                    <div class="container-fluid">
                            <table class="table  table-hover " style="word-break: break-word;" id="nachTableId">
                                <thead>
                                <tr>
                                    <th style="width: 90%;">ФИО</th> 
                                    <th style="width: 10%;">Выбрать</th> 
                                </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                  </div>
                </div>
              </div>
              
            <div class="mt-4 pt-2">
                <input class="btn btn-primary btn-lg float-end" type="submit" id="createUser" value="Зарегистрировать" />
            </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>


@section Scripts
{



    <script>
   
    const passwordInput = document.getElementById('passwordinput');
    $('#nachIdInput').hide();
    $('#logID').hide();
    $('#logID').text(@userId);
    passwordInput.addEventListener('focus', function() {
      passwordInput.type = 'text';
    });
    
    passwordInput.addEventListener('blur', function() {
      passwordInput.type = 'password';
    });
    var depId=0;
    var prevButton = null;
    var nachId=0;
    var prevButton2 = null;
        const swalWithBootstrapButtons = Swal.mixin({
                          customClass: {
                            confirmButton: "btn btn-success m",
                            denyButton:"btn btn-danger ms-5"
                          },
                          buttonsStyling: false
                        });
                        
                let datatable =$('#depTableId').DataTable({
                "language": {
                                    "url": "/lib/Russian.json"
                                },
                            info: false,
                            serverSide: true,
                            searching: false,
                            paging: true,
                            sorting: true,
                            order: [[0, 'asc']],
                            ajax:{
                                url:"@Url.Action("DepHandler", "Dep")",
                                method:'POST',
                                data: function (d) {
                                                    d.filter = {
                                                        DepName: $('input[name="nameDep"]').val(),
                                                        idDep:$('input[name="idDep"]').val(),
                                                        sortColumn: d.columns[d.order[0].column].data,
                                                        sortDirection: d.order[0].dir
                                                    };
                                                    d.start = d.start;
                                                    d.length = d.length;   
                                                },
                                },
                                columns:[
                                    { data: 'departamentNumber',sortable: true,},
                                    { data: 'departamentName',sortable: true,},
                                    { 
                                        data: null,
                                        sortable: false,
                                        render: function (data, type){
                                                return '<button class="btn btn-primary btn-sm center-block">Выбрать</button>'
                                            }
                                    },
                                    
                                    ],
                                    
                                createdRow: function (nRow, data){
                                
                                
                                var handlerSelect = function(event) {
                                    event.preventDefault();
                                
                                    // Сбрасываем класс 'btn-outline-primary' у предыдущей кнопки
                                    if (prevButton) {
                                                prevButton.classList.remove('btn-outline-primary');
                                                prevButton.classList.add('btn-primary');
                                    }
                                
                                    // Добавляем класс 'btn-outline-primary' только к текущей нажатой кнопке
                                    this.classList.remove('btn-primary');
                                    this.classList.add('btn-outline-primary');
                                
                                    depId =data.departamentId;
                                    depName= data.departamentName;
                                    prevButton = this;
                                    depIdInput.value=''+depId;
                                    depNameInput.value=''+depName;
                                    if ((($('select[name="role"]').val() == '1'))) {
                                        $('div[name="nach"]').hide();
                                                                
                                      } else {
                                        $('div[name="nach"]').show();$('#logID').hide();
                                        $('#nachTableId').css('width', '100%');
                                        $('#nachTableId thead th:nth-child(1)').css('width', '90%');
                                        $('#nachTableId tbody td:nth-child(1)').css('width', '90%');
                                        $('#nachTableId thead th:nth-child(2)').css('width', '10%');
                                        $('#nachTableId tbody td:nth-child(2)').css('width', '10%');
                                        datatable2.draw();
                                      }
                                    var input = document.querySelector('input[name="NachalnikId"]');
                                                                            if (input) {
                                                                                    input.value = '';
                                                                                };
                                                                            var input = document.querySelector('input[name="aa"]');
                                                                            if (input) {
                                                                                    input.value = '';
                                                                                }; 
                                }
                                
                                
                                
                                for (var i=1; i< datatable.columns().header().length - 1; i++){
                                        $('td',nRow).eq(i).css('cursor', 'default');
                                        $('td',nRow).eq(i).css('cursor', 'default');
                                }
                                 $('td button',nRow).on('click',handlerSelect);
                                
                            }
                        });
                            $('input[name="nameDep"]').on('change',function (){
                                    datatable.draw();
                            }),
                            $('input[name="idDep"]').on('change',function (){
                                                        datatable.draw();
                                                }),
                            $('#clearFilters').on('click', function (){
                                var input = document.querySelector('input[name="idDep"]');
                                                        if (input) {
                                                                input.value = '';
                                                            }
                                var input = document.querySelector('input[name="nameDep"]');
                                                        if (input) {
                                                                input.value = '';
                                                            }            
                                                        event.preventDefault();
                                                        datatable.draw();
                                });
                                
                let datatable2 =$('#nachTableId').DataTable({
                            "language": {
                                        "url": "/lib/Russian.json"
                                    },
                                        info: false,
                                        serverSide: true,
                                        searching: false,
                                        paging: true,
                                        sorting: true,
                                        order: [[0, 'asc']],
                                        ajax:{
                                            url:"@Url.Action("UserHandler", "User")",
                                            method:'POST',
                                            data: function (u) {
                                                                u.filter = {
                                                                    fio: $('input[name="FIOFilter"]').val(),
                                                                    role: $('select[name="role"]').val() === '5' ? $('select[name="role"]').val() - 3 : $('select[name="role"]').val() - 1,
                                                                    departamentId: depId,
                                                                     sortColumn: u.columns[u.order[0].column].data,
                                                                     sortDirection: u.order[0].dir
                                                                };
                                                                u.start = u.start;
                                                                u.length = u.length;   
                                                            },
                                            },
                                            columns:[
                                                { data: 'fio',sortable: true,},
                                                { 
                                                    data: null,
                                                    sortable: false,
                                                    render: function (data, type){
                                                            return '<button class="btn btn-primary btn-sm center-block">Выбрать</button>'
                                                        }
                                                },
                                                ],
                                            createdRow: function (nRow, data){
                                            
                                            var handlerSelect = function(event) {
                                                event.preventDefault();
                                            
                                                // Сбрасываем класс 'btn-outline-primary' у предыдущей кнопки
                                                if (prevButton2) {
                                                            prevButton2.classList.remove('btn-outline-primary');
                                                            prevButton2.classList.add('btn-primary');
                                                }
                                            
                                                // Добавляем класс 'btn-outline-primary' только к текущей нажатой кнопке
                                                this.classList.remove('btn-primary');
                                                this.classList.add('btn-outline-primary');
                                            
                                                nachId =data.id;
                                                nachName= data.fio;
                                                prevButton2 = this;
                                                nachNameInput.value=''+nachName;
                                                nachIdInput.value=''+nachId;
                                            }
                                            
                                            
                                           for (var i=1; i< datatable.columns().header().length - 1; i++){
                                                   $('td',nRow).eq(i).css('cursor','pointer');
                                           }
                                            $('td button',nRow).on('click',handlerSelect);
                                            
                                        }
                                    });    
                $('input[name="FIOFilter"]').on('change',function (){
                                                    datatable2.draw();
                                            }),
        $('#clearFilter').on('click', function (){
                var input = document.querySelector('input[name="FIOFilter"]');
                                        if (input) {
                                                input.value = '';
                                            }            
                                        event.preventDefault();
                                        datatable2.draw();
                });
        $('div[name="nach"]').hide();
        $('select[name="role"]').on('change', function() {
          if ((($(this).val() == '1')||($('input[name="DepartamentId"]').val()==''))) {
            $('div[name="nach"]').hide();
             
          } else {
            $('div[name="nach"]').show();$('#logID').hide();
            $('#nachTableId').css('width', '100%');
            $('#nachTableId thead th:nth-child(1)').css('width', '90%');
            $('#nachTableId tbody td:nth-child(1)').css('width', '90%');
            $('#nachTableId thead th:nth-child(2)').css('width', '10%');
            $('#nachTableId tbody td:nth-child(2)').css('width', '10%');
            datatable2.draw();
          }
          var input = document.querySelector('input[name="NachalnikId"]');
                      if (input) {
                              input.value = '';
                          };
                      var input = document.querySelector('input[name="aa"]');
                      if (input) {
                              input.value = '';
                          };    
        });   
        
        $('#createUser').on('click', function (e) {
            e.preventDefault();
            
            var isValid = true;
                        var in1 = document.querySelector('#FIOinput').value;
                        var in2 = document.querySelector('#logininput').value;
                        var in3 = document.querySelector('#passwordinput').value;
                        var in4 = document.querySelector('#depIdInput').value;
                        
                            if ((in1 == "")||(in2 == '')||(in3 == '')||(in4 == '')) {
                                isValid = false;
                                Swal.fire({
                                    title: 'Ошибка',
                                    text: 'Пожалуйста, заполните все обязательные поля.',
                                    icon: 'error',
                                    confirmButtonText: 'Ок',
                                });
                                return false;
                            }
                        var in5 = document.querySelector('#nachIdInput').value;
                            var in6 = document.querySelector('#roleSearch').value;
                           
                            if ((in5 == "")&&(in6 != "1")) {
                                                            isValid = false;
                                                            Swal.fire({
                                                                title: 'Ошибка',
                                                                text: 'Пожалуйста, заполните все обязательные поля.',
                                                                icon: 'error',
                                                                confirmButtonText: 'Ок',
                                                            });
                                                            return false;
                                                        }
                        if (isValid) {
            $.ajax({
            
                type: 'POST',
                url: '@Url.Action("CreateUser", "User")', // Убедитесь, что этот URL верный
                data: $('#createUserForm').serialize(),
                success: function (response) {
                    Swal.fire({
                        title: 'Информация',
                        text: response.description,
                        icon: 'success',
                        confirmButtonText: 'Ок',
                    })
                    @*datatable.draw();*@
                },
                error: function (response) {
                    // Обратите внимание, что для доступа к описанию в случае ошибки
                    // может потребоваться использовать response.responseJSON.description
                    Swal.fire({
                        title: 'Ошибка',
                        text: response.responseJSON.description,
                        icon: 'error',
                        confirmButtonText: 'Ок',
                    })
                }
            }); }
        });
    $('#idDep').on('input', function() {
      var inputVal = this.value.toLowerCase(); // Получаем введенное значение и приводим к нижнему регистру
      var suggestions = datatable.column(0).data().toArray(); // Получаем значения из первого столбца таблицы
     if (suggestions === undefined || suggestions === null) {
          suggestions = [];
      }
      // Фильтрация значений из таблицы, которые начинаются с введенного текста
      var uniqueFilteredSuggestions = [...new Set(suggestions.filter(function(item) {
              return item !== null && item.toLowerCase().startsWith(inputVal);
          }))];
      
  
      // Отображение отфильтрованных значений в виде подсказок
      // Здесь можно использовать любую библиотеку для отображения подсказок, например, jQuery UI Autocomplete
      // Ниже приведен простой пример добавления подсказок в элемент <datalist>
      var datalist = $('#suggestionsList8');
      datalist.empty(); // Очистка предыдущих подсказок
  
      uniqueFilteredSuggestions.forEach(function(item) {
          datalist.append('<option value="' + item + '">');
      });
      
      });
    $('#FIOFilter').on('input', function() {
      var inputVal = this.value.toLowerCase(); // Получаем введенное значение и приводим к нижнему регистру
      var suggestions = datatable2.column(0).data().toArray(); // Получаем значения из первого столбца таблицы
     if (suggestions === undefined || suggestions === null) {
          suggestions = [];
      }
      // Фильтрация значений из таблицы, которые начинаются с введенного текста
      var uniqueFilteredSuggestions = [...new Set(suggestions.filter(function(item) {
              return item !== null && item.toLowerCase().startsWith(inputVal);
          }))];
      
  
      // Отображение отфильтрованных значений в виде подсказок
      // Здесь можно использовать любую библиотеку для отображения подсказок, например, jQuery UI Autocomplete
      // Ниже приведен простой пример добавления подсказок в элемент <datalist>
      var datalist = $('#suggestionsList10');
      datalist.empty(); // Очистка предыдущих подсказок
  
      uniqueFilteredSuggestions.forEach(function(item) {
          datalist.append('<option value="' + item + '">');
      });
      
      });
    $('#nameDep').on('input', function() {
          var inputVal = this.value.toLowerCase(); // Получаем введенное значение и приводим к нижнему регистру
          var suggestions = datatable.column(1).data().toArray(); // Получаем значения из первого столбца таблицы
         if (suggestions === undefined || suggestions === null) {
              suggestions = [];
          }
          // Фильтрация значений из таблицы, которые начинаются с введенного текста
          var uniqueFilteredSuggestions = [...new Set(suggestions.filter(function(item) {
                  return item !== null && item.toLowerCase().startsWith(inputVal);
              }))];
          
      
          // Отображение отфильтрованных значений в виде подсказок
          // Здесь можно использовать любую библиотеку для отображения подсказок, например, jQuery UI Autocomplete
          // Ниже приведен простой пример добавления подсказок в элемент <datalist>
          var datalist = $('#suggestionsList9');
          datalist.empty(); // Очистка предыдущих подсказок
      
          uniqueFilteredSuggestions.forEach(function(item) {
              datalist.append('<option value="' + item + '">');
          });
          
          });
    </script>

}